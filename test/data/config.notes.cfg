#
# Filename: config.notes
#
# Author:   Peter van der Plas
# Date:     19 February 2002
#
# (c) ESA/Estec
#
# $Id: config.notes,v 3.19 2013/03/22 14:18:14 pvanderplas Exp $
#
# $Log: config.notes,v $
# Revision 3.19  2013/03/22 14:18:14  pvanderplas
# Issue #0002307: Update EPS version and templates for v2.5.8 release.
#
# Revision 3.18  2012/11/28 13:21:05  pvanderplas
# Issue #0002262: Update EPS version and templates for v2.5.7 beta-3 release.
#
# Revision 3.17  2012/08/16 10:09:42  pvanderplas
# Issue #0002217: Update the CFG template for the upcoming EPS release v2.5.7.
#
# Revision 3.16  2011/09/15 10:09:26  ttsoris
# issue #2038: Update the EPS templates for the upcoming release v2.5.6
#
# Revision 3.15  2011/05/19 14:21:41  pvanderplas
# Issue #001959: Update CFG templates for the upcoming EPS v2.5.5.
#
# Revision 3.14  2010/10/20 12:15:01  pvanderplas
# Issue #0001682: Update the EPS templates for the upcoming release v2.5.4.
#
# Revision 3.13  2009/09/13 12:01:15  pvdplas
# SPR-0514: Update versions and templates for the new EPS v2.4.9 release.
#
# Revision 3.12  2009/07/25 16:36:35  pvdplas
# SPR-0499: Update versions and templates for the new EPS v2.4.8 release.
#
# Revision 3.11  2009/05/02 14:16:21  pvdplas
# SPR-0490: Update versions and templates for the new EPS v2.4.6 release.
#
# Revision 3.10  2009/03/28 13:54:21  pvdplas
# SPR-0484: Update versions and templates for the new EPS v2.4.5 release.
#
# Revision 3.9  2009/02/25 11:31:28  pvdplas
# SPR-0474: Update versions and templates for the new EPS v2.4.3 release.
#
# Revision 3.8  2009/01/18 17:30:01  pvdplas
# SPR-0467: Update versions and templates for the new EPS v2.4.2 release.
#
# Revision 3.7  2008/10/27 08:46:07  pvdplas
# SPR-0452: Update versions and templates for the new EPS v2.4.1 release.
#
# Revision 3.6  2008/09/19 09:35:46  pvdplas
# SPR-0447: Update versions and templates for the new EPS v2.3 release.
#
# Revision 3.5  2008/07/08 15:30:19  pvdplas
# SPR-0427: Update versions and templates for the new EPS v2.3.4 release.
#
# Revision 3.4  2007/07/09 13:52:51  pvdplas
# SPR-0362: Update versions and templates for the new EPS v2.3 release.
#
# Revision 3.3  2007/01/30 22:30:24  peter
# SPR-0334: Update versions and templates for the new EPS v2.2.5 release.
#
# Revision 3.2  2006/08/12 21:15:36  peter
# SPR-0314: Update versions and templates for the new EPS v2.2 release.
#
# Revision 3.1  2006/04/19 16:40:05  peter
# SPR-0289: Update versions and templates for the new EPS v2.1 release.
#
# Revision 3.0  2006/02/22 18:33:12  peter
# Updated to revision 3.0 for EPS major release 2.0.
#
# Revision 2.12  2006/02/22 18:12:56  peter
# SPR-0271: Update versions and templates for the EPS v2.0 major release.
#
# Revision 2.11  2005/08/15 06:13:40  peter
# SPR-0227: Update templates and versions for EPS v1.9 release.
#
# Revision 2.10  2005/07/26 02:36:10  peter
# SPR-0210: Some typos in configuration template need fixing.
#
# Revision 2.9  2005/03/22 16:45:57  peter
# SPR-0197: Update templates and versions for EPS v1.8 release.
#
# Revision 2.8  2004/11/15 11:20:52  peter
# SPR-0174: Update templates and versions for EPS v1.7 release.
#
# Revision 2.7  2004/07/13 15:15:37  rosetta
# SPR-0155: Update templates and versions for EPS v1.6 release.
#
# Revision 2.6  2004/04/08 15:07:26  rosetta
# SPR-0127: Update templates and versions for EPS v1.5 release.
#
# Revision 2.5  2003/08/31 15:56:13  peter
# SPR-0107: Update templates and versions for EPS v1.4 release.
#
# Revision 2.4  2003/04/03 13:47:20  rosetta
# SPR-0088: Version updates for EPS v1.3 release needed.
#
# Revision 2.3  2002/12/10 14:17:40  rosetta
# SPR-0069: Make necessary updates to support the release of EPS v1.2.
#
# Revision 2.2  2002/08/27 15:54:11  rosetta
# SPR-0034: Add directories to output file headers.
#
# Revision 2.1  2002/08/27 13:54:40  rosetta
# SPR-0045: Templates need updating for EPS v1.1.
#
# Revision 2.0  2002/05/08 16:19:33  rosetta
# This is the first official template version for EPS v1.0
#
#

A few guidelines on the configuration files:

Basic syntax
============
- comment lines start with '#'
- all characters after '#' are ignored
- resource files may contain the 'C' comment character
- the 'C' comment character shall appear in the first column only
- following comment text shall be separated by a white space
- a '\' indicates a continuation line: it allows keyword values to
  continue on the next line
- a '\' should be the last character of a line, otherwise it is ignored
- white spaces/tabs are used to separate words
- a keyword is followed by a ':' and then by its keyword values
- no white spaces within keywords/labels, use '_' instead
- keyword/label recognition is not case sensitive
- '|' stands for an exclusive or
- values between [ ] brackets are optional
- an optional number of values is indicated by ...
- all keywords (lines in the file) are optional, except when resulting
  in an inconsistent definition
- a string starts and ends with a '"', upper/lowercase is maintained
  here, white spaces and other special characters are allowed

Use of labels
=============
- a <label> is the base type for identifiers, units and any values
- no white spaces are allowed
- a label shall consist of 'a..z', 'A..Z', '0..9' or any of [_+-.:*%^'/]
- the '_' and '-' characters are considered different
- the '_' character is considered as a letter, e.g. the identifier
  ABCD is not the same as the identifier AB_CD
- labels are not case sensitive, e.g. the identifier ABCD is the same
  as identifier aBcD
- labels used as identifier, e.g. as experiment label, mode label, etc,
  shall not contain any of [+-.:*%^'/]
- all identifiers need to be unique within their specific category,
  e.g. for all actions each label needs to be different, but e.g.
  two different modules may both have a module state that is <OFF>
- a <keyword> is considered as an identifier followed by a ':'

Use of units
============
- each (engineering) value may have an optional unit specifier
- the unit label needs to be specified between [ ] brackets
- if no unit is specified then the default unit will be applied
- unit sets will define the various unit options for a single
  physical unit, e.g. Volts may be V, mV, volts, mvolts, etc
- the unit specified for a value needs to be compatible with the
  value's unit set, if a unit set is applicable for the value
- unit conversions to the default unit will be done automatically

Use of values
=============
- <value> means a single value
- a boolean value shall be of TRUE|FALSE|ON|OFF|YES|NO
- an unsigned integer value shall consist of '0..9' or '+'
- an unsigned integer may also be given in hexadecimal or octal format
- a hexadecimal value is in the format '0xhhhhhhhh', where h is one of
  '0-9', 'a-f' or 'A-F' and where the number of h ranges from 1 to 8
- an octal value is an unsigned integer value that starts with a '0'
  and only consists of any of the '0-7' characters
- a (signed) integer value shall consist of '0..9', '+' or '-'
- a floating point value shall consist of '0..9', '+', '-', '.', 'e' or 'E'
- a floating point value shall be in the IEEE format

Date values
===========
- a date value may be given in the POR or EPS absolute time format
- an EPS <date> value is in the format [dd-month-yyyy[_hh:mm:ss]]
- [dd] is the day number
- [dd] may consist of one or two digits, and may start with zero
- [month] is the full (spelled out) month or any abbreviation
  with a minimum of 3 characters
- [yyyy] is the full year number
- [_hh:mm:ss] is optional and is defined similarly as in the time format
- the '_' character is mandatory here if the time of the day is given
- the time of the day defaults to _00:00:00
- a POR absolute time value is in the format [yy-dddThh:mm:ss[.mmm]Z]
- [yy] is the year in the 21st century and must have two characters
- [ddd] is the day number within the year, counting from 1
- [hh:mm:ss] is defined similarly as in the time format
- [.mmm] is optional and specifies the number of milliseconds
- the EPS software will always ignore the [.mmm] value

Mission
=======
- a single mission ID may be defined
- the mission ID is used in the definition of some of the default
  filenames and environment variable names
- the mission ID in not case-sensitive and shall be a valid identifier,
  i.e. a label not containing any of '+-.:/'
- the default mission is "Mission"
- the SOC label is optional and defaults to "SOC"

Command line
============
- a single set of command line arguments may be defined
- the command line arguments shall be specified as a single string value
- the command line arguments are defined similarly to the regular EPS shell
  command line options
- the command line arguments will be used as default values, these values
  may be overwritten by directly defined arguments using the EPS shell

Data path
=========
- the following data paths may be defined
     EDF_DATA   the location of the EDF input files,
                overwrites environment variable <MISSION>_EDF_DATA
     ITL_DATA   the location of the ITL, POR and PTR input files,
                overwrites environment variable <MISSION>_ITL_DATA
     EVF_DATA   the location of the EVF input files,
                overwrites environment variable <MISSION>_EVF_DATA
- the data path must be specified as a string value
- the current directory may be defined as "."
- if a data path is defined here then it will overwrite the data path
  definition using the (mission specific) environment variable
- the EPS runtime data files are e.g. the help index file and the
  actual help texts, which are located in a dedicated directory
- multiple search paths may be defined using the ';' separator,
  searching is done in order of definition of the data paths,
  note that "." can be used to indicate the current directory

Resources
=========
- any number of spacecraft resources may be defined
- the resource ID may be one of the following:
     TOTAL_POWER        the total power available to the experiments
     DOWNLINK_RATE      the downlink rate of the given downlink device
     ACQUISITION_RATE   the acquisition rate of the given experiment
     SSMM_DUMP_RATE     the data rate for dumping local memory to SSMM
     MAX_MTL_SIZE       the number of MTL commands that can be stored
     MAX_MTL_RATE       the rate of MTL command execution
     MAX_OBCP_EXEC      the maximum number of OBCPs that can onboard
- the resource TOTAL_POWER is given in the unit [Watts]
- the data rate resources are given in the unit [bits/sec]
- some resources (e.g. the data rate resources) may have optional items,
  which instanciate the specific resource
- the data rate resources (i.e. DOWNLINK_RATE, ACQUISITION_RATE and
  SSMM_DUMP_RATE) may have the following items defined:
     [EXP]  <experiment ID>
     MODE   <experiment ID> <mode ID>
     MS     <experiment ID> <module ID> <MS ID>
     ACTION <experiment ID> <action ID>
- the EXP option is defined implicitly for the data rate resource
- the data rate resource values shall always be positive or zero
- the DOWNLINK_RATE resource can only be defined on a downlink device,
  i.e. an experiment with a FROM or FROM_DS data flow
- the ACQUISITION_RATE and SSMM_DUMP_RATE resources can only be defined
  on an experiment that produces data, i.e. with a TO or TO_DS data flow
- the SSMM_DUMP_RATE can only be defined on an experiment with local
  memory, such that data from local memory can be dumped to an SSMM
- the resource default value and the resource file are optional, however
  at least one of these shall be defined
- resource default values may have an optional unit if applicable
- this unit will apply to values in the resource file as well (in case
  no unit is defined here)
- the resource file shall be defined as a string value
- the resource file data column is optional and defaults to column 1
- each resource file entry shall be a date entry or an event entry
- a resource file may not contain both entry types
- resource entry date values shall be given in the absolute format
- resource entry date values shall be consecutive
- resource entry event labels may not have any parameters
- resource entry event labels may not have any delta time values
- a resource file may have any number of data columns
- the number of data columns shall be at least the data column
  as defined in the resource specification (default 1)
- resource entry values may have an optional unit if applicable
- a resource value '-' indicates that no resource is defined at
  the current time in the resource file

Settings
========
- any number of configuration settings may be defined
- the setting ID may be one of the following:
     CHECK_GLOBAL_ACTION (T)   global actions are limited to 8 characters
     CHECK_GLOBAL_PARAM  (T)   global parameters are limited to 8 characters
     CHECK_GLOBAL_UNIT   (T)   global units are limited to 4 characters
     CHECK_GLOBAL_LIST   (T)   global actions and parameters are checked for
                               uniqueness across experiments
     IGNORE_SAME_PARAM   (T)   ignore same global parameters defined in
                               multiple experiments if definitions are
                               compatible
     OUTFILES_IN_SUBDIR  (T)   output files are written in a sub-directory
     MTL_CMD_IS_GLOBAL   (F)   MTL commands can be used directly in a timeline
     WRITE_FILE_DIRS     (F)   prepend the file directories of the used input
                               files when writing the output file headers
     IGNORE_DIRECT_SEQS  (T)   sequences from the MDB containing direct
                               commands are ignored silently, including
                               their commands
     IGNORE_DEF_CDF_VAL  (T)   ignore command parameter values in the MDB for
                               commands that have an unused default value (as
                               the default parameter value is used anyway)
     USE_MDB_REFERENCES  (T)   check sequences using experiment commands and
                               commands used by experiment sequences when
                               generating an EDF using the MDB
     USE_CMD_IN_REF_SEQ  (F)   check also commands used by referenced sequences
                               using experiment commands when generating an EDF
                               using the MDB (slow)
     SEQ_RUN_TYPE_REL    (T)   default run type of generated MDB sequences
     ACTION_RUN_TYPE_MDB (T)   default run type of EDF actions (MDB or EPS)
     ACTION_RUN_TYPE_REL (T)   default run type of EDF actions (REL or ABS)
     GEN_COMMAND_ALIAS   (F)   generate the command alias names
     GEN_CMD_PAR_ALIAS   (F)   generate the command parameter alias names
     GEN_SEQUENCE_ALIAS  (F)   generate the sequence alias names
     GEN_SEQ_PAR_ALIAS   (F)   generate the sequence parameter alias names
     USE_ALIAS_IN_PARS   (F)   use alias names in parameter references
     WRITE_PAR_COMMENT   (T)   generate comments for action parameters
     USE_ALIAS_IN_SEQS   (F)   use alias names in sequence element references
                               including the sequence element parameters
     WRITE_SEQ_COMMENT   (T)   generate comments for sequence elements and
                               sequence element parameters
     VERSIONS_MAY_DIFFER (T)   MDB versions in different EDFs may have
                               different version tags
     SEQS_MAY_OVERLAP    (F)   within a single experiment, multiple overlapping
                               sequences may be executed at the same time
     CMDS_MAY_OVERLAP    (T)   within a single experiment, multiple overlapping
                               commands may be executed at the same time
     MDB_LONG_CCF_DESCR  (F)   the CCF record field DESCR may be 40 instead
                               of the regular 24 characters long
     MDB_CCF_SUBSCH_DEF  (F)   the CCF record has an addition field SUBSCH
                               located after the last regular table column
     PTR_IN_ITL_IGNORED  (F)   silently ignore unhandled PTRs in ITL files
     CHECK_PAR_ENUM_VALS (T)   check parameter enumerated value compatibility
                               for assigned parameters
     USE_MEX_PTR_FORMAT  (F)   in ambiguous cases of reading and writing PTR
                               files in the ESOC FD format, choose the MEX PTR
                               format above the S1 or comparable format
     GET_EVENT_EXEC_TIME (T)   force the expected execution times of all
                               counted events to be computed and used e.g.
                               in sorting
     CORRECT_CPC_UNITS   (F)   correct command parameter units using sequence
                               parameter units when generating EDFs from the
                               MDB or when cross-checking EDFs with the MDB
     USE_VEX_PTR_FORMAT  (F)   in ambiguous cases of reading and writing PTR
                               files in the ESOC FD format, choose the VEX PTR
                               format above the S1 or comparable format, and
                               use the VEX format above the MEX format as well
     ALLOW_CMD_SEQ_UNIT  (T)   allows that command parameters with no unit can
                               be assigned to sequence parameters with a unit
     MTP_ITL_PTR_SUMMARY (F)   include a PTR summary header for each orbit into
                               the generated MTP ITL files
     CUSTOM_FILE_WARNING (F)   defines whether a warning or an error shall be
                               reported in case the PTR custom file is missing
     ALWAYS_USE_CSF_PLAN (T)   all sequences with the CSF_PLAN flag not being
                               A or S will be ignored during EDF generation
     CHECK_RAW_PAR_VALUE (T)   if parameter raw values are defined for the
                               parameter, then the validity of any raw
                               parameter assignment is being checked
     WARN_INVALID_OCTAL  (T)   when invalid octal values are found (e.g. 0789),
                               then a warning will be reported
     CHECK_SEQ_UNIT_CONV (T)   causes a check for unit conversions to be
                               performed on any sequence parameters assigned
                               to either other sequence parameters or to
                               command parameters
     CMD_LVL_NEEDS_VALUE (T)   COMMAND or OBCP actions always need a value,
                               either assigned or using a default value
     SEQ_LVL_NEEDS_VALUE (F)   SEQUENCE actions always need a value,
                               either assigned or using a default value
     PITCH_YAW_POW_OPT   (F)   causes any pitch and yaw parameters to be
                               converted into a user pointing axis, such
                               that power optimisation can be applied
     GEN_COPY_INIT_VALS  (T)   defines if during ITL/PTR and TLIS/POR file
                               generation, any initial timeline values shall
                               be copied to the toplevel output file
     GSEP_FILE_WARNING   (F)   defines whether a warning or an error shall be
                               reported in case a GSEP file is missing
     ALLOW_MEX_FLAGCOMMS (T)   allows the FLAGCOMMS parameter in the ESOC FD
                               PTR format on all pointing types (MEX only)
     FORCE_POR_EVENT_DT  (F)   forces an event with no delta time to be written
                               into the POR format with an explicit delta time
                               (being 00:00:00)
     ALLOW_MULTIPLE_SEQS (F)   within a single experiment, multiple transient
                               sequences may be executed at the same time
     ALLOW_MULTIPLE_CMDS (T)   within a single experiment, multiple transient
                               commands may be executed at the same time
     MATCH_SEQ_CMD_VALS  (F)   the values of sequence parameters assigned to
                               command parameters shall match exactly
     ALLOW_SEQ_FIXED_CMD (T)   allows sequence parameters (with no value)
                               to be assigned to fixed command parameters
     CHECK_CMD_EDIT_PARS (F)   forces all editable command parameters to
                               be listed in the sequence
     CHECK_SEQ_PAR_ORDER (F)   checks if sequence parameters are used in the
                               correct order in command parameter assignments
     CHECK_SEQ_PARS_USED (F)   checks if all sequence parameters are used in
                               the command parameter assignments
     FORCE_PAR_RAW_TYPE  (F)   forces all sequence and command parameters to
                               have a raw type defined
     ALLOW_RAW_VAL_UNITS (T)   allows the definition of units on raw values 
     CHECK_STRICT_RADIX  (F)   will prevent the value radix to be specified
                               on parameter types other than the raw unsigned
                               integer type (including BOOL and ENUM)
     ERROR_INVALID_OCTAL (F)   will cause an error to be reported when an
                               invalid octal value (which will be interpreted
                               as integer) is found
     WARN_OCTAL_VALUES   (F)   will cause a warning to be reported when any
                               octal values are used as parameter values
     ERROR_OCTAL_VALUES  (F)   will cause an error to be reported when any
                               octal values are used as parameter values
     SEQ_CMD_EXACT_UNITS (F)   forces sequence to command parameter
                               assignments to have exacly the same units
     STRICT_POR_FORMAT   (F)   forces a stricter checking of the POR input
                               files against the MIB
     DELETE_USED_PARTIAL (T)   will cause partial profiles to be automatically
                               deleted when used during Z-record computation
     SEQUENCE_IS_GLOBAL  (F)   will implicitly declare any SEQUENCE actions
                               as global actions callable from the timeline
     GEN_SPLIT_MODELLING (F)   TLIS/PIOR generation will produce separate
                               output files for modelling actions
     WRITE_ZERO_EVENT_DT (F)   in the ITL output, an event with no delta time
                               will be written with a delta time of zero
     PROF_ALLOW_NEG_TIME (F)   allows negative delta times on power and
                               data rate profiles, to be redistributed on
                               any previous timeline actions
     WRITE_FD_SLEW_FLAGS (F)   when set then the MEX ESOC FD PTR slew flags
                               INIT/FINAL_TIME_FIXED will be written
     WRITE_MEX_FLAGCOMMS (T)   when set then the MEX ESOC FD PTR parameter
                               FLAGCOMMS will be written on every request
     ALLOW_Z_RECORD_DAYS (T)   when set then any Z-record time values may
                               exceed the 24-hour boundary
     ORBIT_KEEP_ACTIVITY (F)   when set then sequences in a single activity
                               are kept together in a single orbit POR when
                               written as part of PORG/POR generation
     PTR_WRITE_SRC_FILES (F)   when set then timeline source files will be
                               added as comments to the PTR when written in
                               the ESOC FD format
     EXTRACT_NESTED_SEQS (F)   when set then any nested sequences which are
                               not explicitly authorised by the SOC will be
                               extracted as well
     CHECK_CMD_PAR_ORDER (F)   when set then the order of command parameters
                               in a sequence definition shall match the order
                               of the parameters in the command definition
     CHECK_UNITS_DEFINED (F)   when set the EPS will check for all parameter
                               value assignments that if the parameter has a
                               unit, then the value has a unit as well (but
                               not neccesarily the same unit)
     CHECK_PAR_VAL_RADIX (F)   when set then the validity of the radix of
                               all parameter values is checked including any
                               modelling parameters
     ROUND_PROFILE_VALS  (T)   causes the power and data rate values in the
                               ITL resource profiles to be written with the
                               accuracy as supported in the POR Z-records
     PTR_C_CHAR_COMMENT  (F)   when a line in a PTR file in the ESOC FD
                               format starts with a 'C' character, then the
                               line is always considered as a comment line
     NESTED_SEQ_EXEC_MDB (T)   execute nested sequences according to the
                               timing as described in the SCOS-2000 Database
                               ICD, i.e. use relative time w.r.t. the last
                               command in the previous sequence
     POR_HEADER_USE_HTA  (F)   when set then the POR absolute time header
                               will be written in the new format, with the
                               leading HTA directive
     POR_HEADER_USE_HTR  (F)   when set and all entries in the timeline to be
                               written contain only simple entries, and these
                               entries are based on counted events, then the
                               POR header will be written using the new HTR
                               record format as defined in the CRID issue C4
     REPORT_NO_HTR_ERROR (T)   when set then an error will be reported when
                               the POR HTR header could not be resolved
     MDB_USE_MIB_ICD_V69 (F)   when set then the MDB parser will use the MIB
                               format as in the SCOS-2000 MIB ICD issue 6.9
     MDB_USE_BC_CCS_HACK (F)   when set then some missing fields in the CSS
                               MIB for BepiColombo will be accepted, note
                               that this flag will automatically force the
                               use of the MDB_USE_MIB_ICD_V69 setting
     MTL_USES_REDUNDANCY (T)   when set then the redundant periods are shown
                               in the MTL resources output file and related
                               constraints are being checked and reported
     OBS_ID_USE_ABS_TIME (F)   when set then the observation ID summary and
                               details output files will be written using
                               absolute time values and will include some
                               additional information
     COMPUTE_DS_LATENCY (F)    when set then the data store latency will be
                               computed and the latency will be reported in
                               the dedicated output file, furthermore time-
                               based data transfers can be applied in case
                               latency information is available
     LATENCY_WRITE_MINUS (F)   when set then in the latency output file any
                               value for which no data was acquired in the
                               latency period is marked with an additional
                               minus sign.
- all settings are of the boolean type (TRUE [T] or FALSE [F]), if TRUE
  then the EPS will behave as described for the specific setting ID
- setting values may have an optional unit if applicable (currently unused)

Output files
============
- a single set of output files may be defined
- the ALL qualifier will cause all output files to be written
- the ALL qualifier can not be combined with any other output file options
- the NONE qualifier will cause no output files to be written
- the NONE qualifier can not be combined with any other output file options
- any other combination of output files options can be made here

Output format
=============
- the output format will have effect on the power and data rate output files
- a format specification will either effect POWER values, DATA_RATE values,
  MEMORY values or BUS_RATE values
- a format can be defined for ALL values (redefining the default), for the
  TOTAL values column or for a specific experiment column or databus column
  in the output file
- if no format is defined then a default format will be used
- the unit is mandatory and shall be compatible with the base unit defined
  for the effected output values (i.e. POWER, DATA_RATE, MEMORY or BUS_RATE)
- the output format type is either FP (floating point, e.g. xxx.yyy), EXP
  (exponential, e.g. x.yyye+06) or AUTO (the default, depending on the value
  either FP or EXP is used), the _CAP extension will cause the exponent sign
  to be 'E' instead of 'e'
- the field width is the total number of characters in the output column,
  aligned to the right and appended with space to the left, note that if
  the accuracy is set too high, certain values will be printed using more
  space than defined using the field width
- the field width will have a minimum of 7 characters (also the default)
- the accuracy is the number of digits behind the floating point for the FP
  and EXP formats, it is the total number of digits for the AUTO format
- the accuracy shall be less than the field width (in practice additional
  space is needed for the floating point and the exponent, the field width
  shall therefore be significantly larger than the accuracy)
- if the accuracy is set to zero then no floating point will be printed
- the default accuracy is 6 digits

Output alignment
================
- the output alignment definition will have effect on either ITL and PTR files
  (ITL option) or on the action and timeline output files (OUT option)
- three positive integers have to be given, these are the start columns for
  the experiment labels, the mode labels and the action labels respectively
- the start columns must be given in increasing order
- the ITL default values are column numbers [30 39 48], the OUT default
  values are column numbers [15 27 39]

Command name definitions
========================
- any number of MDB command naming conventions may be defined
- the experiment must be a valid experiment as defined in the EDF
- multiple command name definitions are allowed for a single experiment
- the naming key is defined as a label value
- the key offset is optional and defaults to zero, indicating that the
  key is searched for from the leftmost character in the command label
- the list of explicit command names is optional and may contain any
  number of names, this might be used to defined platform command names
  related to the experiment (e.g. experiment ON|OFF commands)

Sequence name definitions
=========================
- any number of MDB sequence naming conventions may be defined
- the experiment must be a valid experiment as defined in the EDF
- multiple sequence name definitions are allowed for a single experiment
- the naming key is defined as a label value
- the key offset is optional and defaults to zero, indicating that the
  key is searched for from the leftmost character in the sequence label
- the list of explicit sequence names is optional and may contain any
  number of names, this might be used to defined platform sequence names
  related to the experiment (e.g. experiment ON|OFF sequences)

OBCP name definitions
=====================
- any number of OBCP naming conventions may be defined
- the naming key is defined as a label value
- the key offset is optional and defaults to zero, indicating that the
  key is searched for from the leftmost character in the OBCP label
- the list of explicit OBCP names is optional and may contain any
  number of names, this might be used for OBCPs that do not conform
  any naming convention

Telemetry check
===============
- a single telemetry check may be defined
- telemetry check actions found in ITL and POR files will be ignored
- telemetry checks are identified using their specific naming convention
- the naming key is defined as a label value
- the key offset is optional and defaults to zero, indicating that the
  key is searched for from the leftmost character in the action label

Related events
==============
- any number of related events may be defined
- the base event is the event that will always be given (e.g. GS_HM)
- any number of contained events may be defined (e.g. GS_05, GS_10)
- missing contained events will be reconstructed automatically

Pointing event
==============
- a single event used for pointing event expansion may be defined
- an event name shall be given here, event states will not be accepted

Resolve to event
================
- a single event used for resolution of time based entries may be defined
- an event state shall be given here, to resolve to a single event state;
  if an event name is given, the resolution will be performed to both
  event states (if the event is continuous)
- the resolve to event shall either be a FIXED event or a GLOBAL event

Derived events
==============
- any number of derived events may be defined
- a derived event expression uses two event states
- the event states are evaluated using an AND or (inclusive) OR expression
- the resulting state may be negated using the NOT operator
- the default resulting state operator is IS and is optional
- for multi-events, by default all event items are processed
- for multi-events, a range of event items may be given (counting from 1)
- the event item range shall not exceed the maximum number of multi-events
- derived events may be used in other derived events
- recursive use of derived events in other direved event is not allowed

Output events
=============
- any number of output events may be defined
- event names shall be given here, event states will not be accepted
- when at least one output event has been defined, then the event output
  list is filtered to contain only the defined output events

Exclude actions
===============
- any number of exclude actions may be defined
- the experiment must be a valid experiment as defined in the EDF
- multiple action name definitions are allowed for a single experiment

Time Periods
============
- the planning periods define the medium-term plan (MTP) numbering
- the start date is the start date of MTP #1
- the delta time is the duration of a single MTP
- the first MTP is #1, the last MTP is not limited by any number 
- the number of command periods (CPs) per MTP shall be an integer value
- an optional planning periods definition file can be specified
- the planning periods file consists of records with four integer values:
     CP number     an integer from 1 to 9999
     MTP number    an integer from 1 to 999
     start orbit   an integer from 1 to 99999
     end orbit     an integer from 1 to 99999
- CP, MTP and orbit numbers shall be consecutive; multiple CP numbers may
  relate to the same MTP, the start orbit of a CP must be consecutive with
  the end orbit of the previous CP
- the orbit numbering is computed by the EPS software
- for this, a pericenter event state shall be defined
- the orbit number is extracted from the event file using the pericenter
- as well, an event state indicating the orbit start shall be defined
- the orbit start event instance is always selected before the pericenter
- an optional delta time is allowed here
- the orbit number is by default taken from the pericenter event count
- alternatively, the event count of the apocenter before or after the
  orbit pericenter may be used as the orbit number
- when the offset is defined the orbit number will be obtained from the
  event description field as in the FD event file format, this will be
  done for the orbit number event being used (pericenter or apocenter)
- the offset value defines the number of characters in the EVTDES field
  where the event count number shall be parsed

File templates
==============
- the following file templates may be defined
     MTP_EXP_ITL    experiment specific ITL (VS0PI0)
     MTP_EXP_ITL2   experiment specific ITL (VSXPIY)
     MTP_PL_ITL     toplevel ITL including experiment ITLs
                    (i.e. MTP_EXP_ITL, the VS0PI0 version)
     MTP_PL_PTR     global PTR file
     CP_EXP_MOD     experiment specific modelling ITL
     CP_EXP_MOD2    experiment specific modelling ITL
     CP_EXP_ITL     experiment specific ITL (VS0PI0)
     CP_EXP_ITL2    experiment specific ITL (VSXPIY)
     CP_EXP_POR     experiment specific POR (VS0PI0)
     CP_EXP_POR2    experiment specific POR (VSXPIY)
     CP_PL_ITL      toplevel ITL including experiment ITLs
                    (i.e. CP_EXP_ITL, the VS0PI0 version)
     TLIS_PL_ITL    toplevel ITL for MTP including CP ITLs
                    (i.e. CP_PL_ITL)
     ORB_ITL        experiment specific ITL for one orbit
     ORB_POR        experiment specific POR for one orbit
- when genering ITL/PTR files, the templates MTP_EXP_ITL, MTP_PL_ITL
  and MTP_PL_PTR shall be defined, whereas MTP_EXP_ITL2 is optional
- when genering TLIS/PIOR files, the templates CP_EXP_ITL, CP_PL_ITL
  and TLIS_PL_ITL shall be defined, whereas CP_EXP_ITL2 is optional,
  alternatively CP_EXP_POR and CP_EXP_POR2 are used when POR output
  has been requested
- when genering PORG/POR files, the template ORB_POR shall be defined,
  or alternatively ORB_ITL in case ITL output has been requested
- each file template is defined as a string
- special caracter sequence may be given, which will be resolved
  using dynamic data
- the following character sequence may be defined
     aaaa(a) first orbit number in planning period
     bbbb(b) last orbit number in planning period
     cccc(c) orbit number of POR file
     mm      POR version (from 01-99)
     nnnnn   POR sequence number (counting from 1)
     V       version letter (counting from default 'A')
     XX      two-character experiment mnemonic (uppercase)
     yyy     MTP number with leading zeros
     zzzz    CP period number with leading zeros
- character sequence shall be enclosed between square brackets ([ ])

Generate format
===============
- generation output formats may be defined for PIOR and PORG
- the generation output format may either be ITL or POR
- the default format for PIOR generation is ITL, for PORG it is POR
- any combination of generate format definitions is allowed; in case of
  conflicting definitions the latter one prevails
- a format definition may apply to a single experiment or to ALL experiments
- generation output formats may be overridden from the command line using
  the "-f <itl|por>" option

Reference files
===============
- the following reference files may be defined
     ORBIT   the name of the orbit reference file
     EVENT   the name of the event reference file
     TMSS    the name of the TMSS reference file
- reference files will be printed in the output PTR in the ESOC FD format

Generate profile
================
- POWER and DATA_RATE profiles and also MODES may be generated for
  PIOR, PORG, PORL (POR-lite), EXEC (regular timeline execution) and
  EXE2 (alternative regular timeline execution)
- the following options are available, note that OFF and ON are provided
  for backwards compatibility reasons:
     KEEP (OFF)     this is the default, no resource profiles will
                    be computed, any available resource profiles
                    and any available partial profiles will be kept,
                    available resource profiles will be used when
                    computing experiment resources, otherwise partial
                    profiles will be used when available
     COMPUTE (ON)   resource profiles will be computed, any available
                    resource profiles will be kept, any available
                    partial profiles will be removed when used during
                    computation, available resource profiles will be
                    used when computing experiment resources, otherwise
                    partial profiles will be used when available
     PARTIAL        resource profiles will be computed, any available
                    resource profiles will be kept, except if partial
                    profiles are available, partial profiles will
                    always be removed, available resource profiles
                    will be used when computing experiment resources,
                    but only if no partial profiles are available,
                    otherwise partial profiles will be used when
                    available
     RECOMPUTE      resource profiles will be computed, resource
                    profiles will never be kept, partial profiles
                    will always be removed, no resource profiles
                    will be used when computing experiment resources,
                    only partial profiles will be used when available
     CORRECT        resource profiles will be corrected or created
                    when not yet available, to be redistributed from
                    the already existing resource profiles
     CHECK          resources profiles will be compared against the
                    experiment modelling and if exceeding the modelling
                    then a conflict will be reported, resource profiles
                    are being corrected before being compared
     REMOVE         no resource profiles will be computed, any existing
                    resource profiles will be removed, available resource
                    profiles will be used when computing experiment resources,
                    otherwise partial profiles will be used when available
     PID            this will cause PID profiles to be generated based on
                    the experiment modelling, for all defines experiment
                    PIDs; using this option will disallow other profile
                    options, as such all available data rate profiles will
                    be used as input, but will never be modified
- the PID option is only allowed for the DATA_RATE profile
- any combination of generate profile definitions is allowed; in case of
  conflicting definitions the latter one prevails
- a profile definition may apply to a single experiment or to ALL experiments

PTR resolution
==============
- any number of PTR resolves may be defined
- for the resolution of a single PTR flag, two event states shall be given
- PTR flags will be resolved according to the following table:
     PTR flag      state #1   state #2
     ---------------------------------
     NORTH         FALSE      TRUE
     NORTH_EARTH   FALSE      TRUE
     NORTH_NADIR   FALSE      TRUE
     COMMS         FALSE      TRUE
     HGA           HGA1       HGA2
     ECLIPTIC      FALSE      TRUE
     YAXIS         POSITIVE   NEGATIVE
- only PTR flags which have a value in the PTR will be resolved
- in case the two event states specified are not mutually exclusive,
  the resulting PTR flag state is undefined
- the NORTH option will resolve any NORTH flag, regardless of the pointing
  mode, whereas NORTH_EARTH will only resolve the NORTH flag on Earth and
  warmup pointing, and NORTH_NADIR will only resolve the NORTH flag on nadir
  with optional off-track pointing

PTR MTL commands
================
- the default handling of the NR_OF_MTL_COMMANDS parameter in PTR can
  be defined here, which should be one of the following types:
     MANDATORY   the number of MTL commands is mandatory on each PTR request
                 and will be added to the actual number of MTL commands
     OPTIONAL    the number of MTL commands is optional, the number will
                 be added to the actual number of MTL commands when found
     IGNORE      any number of MTL commands on a PTR request will be ignored
     NEVER       the number of MTL commands on a PTR request is not allowed
- the default PTR MTL commands type is OPTIONAL
- note that when setting the NR_OF_MTL_COMMANDS parameter to zero, it
  will be recognised as a valid value (in case of MANDATORY commands)

Do not expand experiments
=========================
- any number of experiments "not to be expanded" during the ITL/PTR or
  TLIS/PIOR generation process can be defined here
- timeline entries of these experiments will not appear in any of the
  generated ITL files
- global include files of these experiments will be referenced in the
  toplevel generated file

PTR source and destination
==========================
- a single source and destination label can be defined, this label
  shall be a valid identifier with exactly 6 characters
- the label is used to replace the ESOC FD PTR output filename header
  parameter, in case it has been given in the DDID format 

POR write source files
======================
- a single POR write source files directive can be defined, which
  should be one of:
     ZL_REC    any source files will be written as ZL records
     EPS_SF    any source files will be written as EPS source file
               directives ("CE Source_file: ..."), which are reparsable
     COMMENT   any source files will be written as regular POR
               comments ("C Source file: ..."), which are non-reparsable
     NONE      source files will not be written to the POR
- the default write source files directive is ZL_REC

Latency configuration
=====================
- the latency End-of-Pass (EoP) event shall be the event state label
  of the event that is used to define the latency reporting periods
- the latency method defines how data store latency will be computed:
     FIRST_DATA    the latency is computed as the time difference between
                   the time of the first acquired data in a period and
                   the actual download time of this data
     LAST_DATA     the latency is computed as the time difference between
                   the time of the last acquired data in a period and
                   the actual download time of this data
     ALL_DATA      the latency is computed as the time difference between
                   the time of the first acquired data in a period and
                   the actual download time of last acquired data, i.e.
                   when all data for the period has been downloaded
     USE_AVERAGE   the latency is computed as the weigthed average (using
                   the data volume as the weighting factor) between the
                   start time of each part of the acquired data in a period
                   and the actual download time of these data parts
- the default latency method is ALL_DATA
- latency will be computed accurately (up to the second), but will be
  reported in days, rounded down (i.e. 1.9 days latency will result in
  a reported latency of exactly 1 day)
